// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String         @id @default(uuid())
  email        String         @unique
  password     String
  name         String
  username     String         @unique
  bio          String?
  pfp          String?
  songRatings  SongRating[]
  albumRatings AlbumRating[]
  //user followers is all the people following the user
  //it's getting every one where the current user is the "following"
  followers    Follow[]       @relation("following")
  //user following is all the people they're following
  //it's getting every follow where the current user is the "follower" 
  following    Follow[]       @relation("followers")
  Playlist     Playlist[]
  createdAt    DateTime       @default(now())
  inNotis      Notification[] @relation("in")
  outNotis     Notification[] @relation("out")
}

model Follow {
  //followerId references id in User.
  //when you're getting a user's following (like the people who the user is following), 
  //you're looking for when the current user is the follower in this model,
  //hence why the follower below has a relation with the User model's following
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations

  //follower is the user that is following the other user
  follower   User     @relation("followers", fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  //followee is the user that is being followed (the user the follower is following)
  followee   User     @relation("following", fields: [followeeId], references: [id], onDelete: Cascade)
  followeeId String
  createdAt  DateTime @default(now())

  @@id([followerId, followeeId])
}

model SongRating {
  song      Song     @relation(fields: [songId], references: [id])
  songId    String
  stars     Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())

  @@id([userId, songId])
}

model AlbumRating {
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String
  stars     Float
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, albumId])
}

// only works for follow notis for now
model Notification {
  fromUserId String
  fromUser   User     @relation("out", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUserId   String
  toUser     User     @relation("in", fields: [toUserId], references: [id], onDelete: Cascade)
  message    String
  createdAt  DateTime @default(now())

  @@id([fromUserId, toUserId])
}

// model Notification {
//   id               String             @id @default(uuid())
//   NotificationUser NotificationUser[]
//   User             User?              @relation(fields: [userId], references: [id])
//   userId           String?
// }

// model NotificationUser {
//   notification   Notification @relation(fields: [notificationId], references: [id])
//   user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
//   notificationId String
//   userId         String
//   createdAt      DateTime     @default(now())

//   @@id([notificationId, userId])
// }

model Song {
  id          String         @id
  name        String
  preview_url String?
  image_url   String
  playlists   PlaylistSong[]
  songRatings SongRating[]
  artists     Artist[]
  SongArtist  SongArtist[]
}

model PlaylistSong {
  //on playlist delete, cascade this
  playlist   Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song       Song     @relation(fields: [songId], references: [id])
  playlistId String
  songId     String
  createdAt  DateTime @default(now())

  @@id([playlistId, songId])
}

model Playlist {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  songs       PlaylistSong[]
  name        String
  description String?
  image       String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Album {
  id           String        @id
  name         String
  image_url    String
  albumRatings AlbumRating[]
  artists      Artist[]
  AlbumArtist  AlbumArtist[]
}

model SongArtist {
  song     Song   @relation(fields: [songId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
  songId   String
  artistId String

  @@id([songId, artistId])
}

model AlbumArtist {
  album    Album  @relation(fields: [albumId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
  albumId  String
  artistId String

  @@id([albumId, artistId])
}

//can add artists to playlist (favorite artist playlist)
model Artist {
  id          String        @id
  name        String
  songs       Song[]
  SongArtist  SongArtist[]
  AlbumArtist AlbumArtist[]
  albums      Album[]
}
