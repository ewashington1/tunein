// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(uuid())
  email            String             @unique
  password         String
  name             String
  username         String             @unique
  bio              String?
  pfp              String?
  songRatings      SongRating[]
  albumRatings     AlbumRating[]
  //user followers is all the people following the user
  //it's getting every one where the current user is the "following"
  followers        Follow[]           @relation("following")
  //user following is all the people they're following
  //it's getting every follow where the current user is the "follower" 
  following        Follow[]           @relation("followers")
  Playlist         Playlist[]
  createdAt        DateTime           @default(now())
  NotificationUser NotificationUser[]
}

model Follow {
  //followerId references id in User.
  //when you're getting a user's following (like the people who the user is following), 
  //you're looking for when the current user is the follower in this model,
  //hence why the follower below has a relation with the User model's following
  //https://www.prisma.io/docs/concepts/components/prisma-schema/relations/self-relations#many-to-many-self-relations

  //follower is the user that is following the other user
  follower   User     @relation("followers", fields: [followerId], references: [id])
  followerId String
  //followee is the user that is being followed (the user the follower is following)
  followee   User     @relation("following", fields: [followeeId], references: [id])
  followeeId String
  createdAt  DateTime @default(now())

  @@id([followerId, followeeId])
}

model SongRating {
  song      Song     @relation(fields: [songId], references: [id])
  songId    String
  stars     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, songId])
}

model AlbumRating {
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String
  stars     Float
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, albumId])
}

model Notification {
  id               String             @id @default(uuid())
  NotificationUser NotificationUser[]
}

model NotificationUser {
  notification   Notification @relation(fields: [notificationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  notificationId String
  userId         String
  createdAt      DateTime     @default(now())

  @@id([notificationId, userId])
}

model Song {
  id          String         @id
  name        String
  preview_url String?
  image_url   String
  playlists   PlaylistSong[]
  songRatings SongRating[]
  artists     Artist[]
  SongArtist  SongArtist[]
}

model PlaylistSong {
  playlist   Playlist @relation(fields: [playlistId], references: [id])
  song       Song     @relation(fields: [songId], references: [id])
  playlistId String
  songId     String
  createdAt  DateTime @default(now())

  @@id([playlistId, songId])
}

model Playlist {
  id          String         @id @default(uuid())
  user        User           @relation(fields: [userId], references: [id])
  userId      String
  songs       PlaylistSong[]
  name        String
  description String?
  image       String?
}

model Album {
  id           String        @id
  name         String
  image_url    String
  albumRatings AlbumRating[]
  artists      Artist[]
  AlbumArtist  AlbumArtist[]
}

model SongArtist {
  song     Song   @relation(fields: [songId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
  songId   String
  artistId String

  @@id([songId, artistId])
}

model AlbumArtist {
  album    Album  @relation(fields: [albumId], references: [id])
  artist   Artist @relation(fields: [artistId], references: [id])
  albumId  String
  artistId String

  @@id([albumId, artistId])
}

//can add artists to playlist (favorite artist playlist)
model Artist {
  id          String        @id
  name        String
  songs       Song[]
  SongArtist  SongArtist[]
  AlbumArtist AlbumArtist[]
  albums      Album[]
}
